
/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns ()
#define function readNumberOfHorses() view returns (uint256)

/* Storage */
#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
  0x00                                       // [0]
  calldataload                               // [calldata(32)]
  push1 0xe0                                 // [0xE0, calldata(32)]
  shr                                        // [function_selector]
  dup1                                       // [function_selector, function_selector]

  __FUNC_SIG(updateHorseNumber)              // [0xcdfead2e, function_selector, function_selector]
  eq
  updateHorseNumberJump                      // [updateHorseNumberProgramCounter, 1/0, function_selector]
  jumpi                                      // [function_selector]

  __FUNC_SIG(readNumberOfHorses)             // [0xe026c017, function_selector]
  eq
  readNumberOfHorsesJump                     // [readNumberOfHorsesProgramCounter, 1/0]
  jumpi                                      // []

  0x00 0x00 revert                           // [0x00, 0x00] -> []

  updateHorseNumberJump:
    UPDATE_NUMBER_OF_HORSES()

  readNumberOfHorsesJump:
    READ_NUMBER_OF_HORSES()
}

#define macro UPDATE_NUMBER_OF_HORSES() = takes(0) returns(0) {
  push1 0x04                                  // [0x04]
  calldataload                                // [first_argument]
  [NUMBER_OF_HORSES_STORAGE_SLOT]             // [storage_slot, first_argument]
  sstore                                      // []
  stop                                        // []
}

#define macro READ_NUMBER_OF_HORSES() = takes(0) returns(0) {
  [NUMBER_OF_HORSES_STORAGE_SLOT]             // [storage_slot]
  sload                                       // [number_of_horses]
  0x00                                        // [0x00, number_of_horses]
  mstore                                      // []
  0x20                                        // [0x20]
  0x00                                        // [0x00, 0x20]
  return                                      // []
}
