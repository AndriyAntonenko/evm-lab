/**********************************************************************
* HUFF implementation of ./HorseStore.sol                             *
***********************************************************************/

/**********************************************************************
* Function Interfaces                                                 *
***********************************************************************/
// HorseStore functions
#define function HORSE_HAPPY_IF_FED_WITHIN() nonpayable returns (uint256)
#define function mintHorse() nonpayable returns ()
#define function horseIdToFedTimeStamp(uint256) nonpayable returns (uint256)
#define function feedHorse(uint256) nonpayable returns ()
#define function isHappyHorse(uint256) nonpayable returns (bool)

// ERC721
#define function balanceOf(address) view returns (uint256)
#define function ownerOf(uint256) view returns (address)
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function totalSupply() nonpayable returns (uint256)

// @TODO: IERC721Enumerable
// #define function tokenByIndex(uint256 index) nonpayable view returns (uint256)
// #define function tokenOfOwnerByIndex(address owner, uint256 index) nonpayable view returns (uint256)

// @TODO: IERC721
// #define function safeTransferFrom(address,address, uint256, bytes) nonpayable returns ()
// #define function safeTransferFrom(address,address, uint256) nonpayable returns ()
#define function transferFrom(address,address, uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()
#define function getApproved(uint256) nonpayable returns (address)
#define function setApprovalForAll(address,bool) nonpayable returns ()
#define function isApprovedForAll(address,address) nonpayable returns (bool)

/**********************************************************************
* Errors                                                              *
***********************************************************************/
#define error HorseStoreForbiddenError()
#define error ERC721InvalidOperator(address)
#define error ERC721NonexistentToken(uint256)
#define error ERC721InvalidReceiver(address)
#define error ERC721NonexistentToken(uint256)
#define error ERC721InsufficientApproval(address,uint256)

/**********************************************************************
* Events                                                              *
***********************************************************************/
#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)
#define event ApprovalForAll(address,address,bool)

/**********************************************************************
* Constants                                                           *
***********************************************************************/
#define constant HORSE_HAPPY_IF_FED_WITHIN_SECONDS = 0x15180 // 1 day
#define constant NAME_OFFSET                       = 0x0000000000000000000000000000000000000000000000000000000000000080
#define constant NAME_LENGTH_OFFSET                = 0x00000000000000000000000000000000000000000000000000000000000000a0
#define constant SYMBOL_OFFSET                     = 0x0000000000000000000000000000000000000000000000000000000000000020
#define constant SYMBOL_LENGTH_OFFSET              = 0x0000000000000000000000000000000000000000000000000000000000000040

/**********************************************************************
* Storage                                                             *
***********************************************************************/
#define constant OWNERS_MAPPING_STORAGE_SLOT       = FREE_STORAGE_POINTER()
#define constant BALANCES_MAPPING_STORAGE_SLOT     = FREE_STORAGE_POINTER()
#define constant ALL_TOKENS_STORAGE_SLOT           = FREE_STORAGE_POINTER()
#define constant HORSE_FED_TIMESTAMPS_STORAGE_SLOT = FREE_STORAGE_POINTER()
#define constant TOKEN_APPROVALS_STORAGE_SLOT      = FREE_STORAGE_POINTER()
#define constant OPERATOR_APPROVALS_STORAGE_SLOT   = FREE_STORAGE_POINTER()

/**********************************************************************
* Entrypoint                                                          *
***********************************************************************/
#define macro MAIN() = takes(0) returns (0) {
  0x00 calldataload push1 0xe0 shr           // [function_selector]

  dup1 __FUNC_SIG(mintHorse)                 // [__FUNC_SIG(mintHorse), function_selector, function_selector]
  eq mint_horse_dest jumpi                   // [function_selector]

  dup1 __FUNC_SIG(feedHorse)                 // [__FUNC_SIG(feedHorse), function_selector, function_selector]
  eq feed_horse_dest jumpi                   // [function_selector]

  dup1 __FUNC_SIG(approve)                   // [__FUNC_SIG(approve), function_selector, function_selector]
  eq approve_dest jumpi                      // [function_selector]

  dup1 __FUNC_SIG(setApprovalForAll)         // [__FUNC_SIG(transferFrom), function_selector, function_selector]
  eq set_approval_for_all_dest jumpi         // [function_selector]

  dup1 __FUNC_SIG(transferFrom)              // [__FUNC_SIG(transferFrom), function_selector, function_selector]
  eq transfer_from_dest jumpi                // [function_selector]

  dup1 __FUNC_SIG(horseIdToFedTimeStamp)     // [__FUNC_SIG(horseIdToFedTimeStamp), function_selector, function_selector]
  eq horse_id_to_fed_timestamp_dest jumpi    // [function_selector]

  dup1 __FUNC_SIG(name)                      // [__FUNC_SIG(name), function_selector, function_selector]
  eq name_dest jumpi                         // [function_selector]

  dup1 __FUNC_SIG(symbol)                    // [__FUNC_SIG(symbol), function_selector, function_selector]
  eq symbol_dest jumpi                       // [function_selector]

  dup1 __FUNC_SIG(totalSupply)               // [__FUNC_SIG(totalSupply), function_selector, function_selector]
  eq total_supply_dest jumpi                 // [function_selector]

  dup1 __FUNC_SIG(ownerOf)                   // [__FUNC_SIG(ownerOf), function_selector, function_selector]
  eq owner_of_dest jumpi                     // [function_selector]

  dup1 __FUNC_SIG(balanceOf)                 // [__FUNC_SIG(balanceOf), function_selector, function_selector]
  eq balance_of_dest jumpi                   // [function_selector]

  dup1 __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN) // [__FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN), function_selector, function_selector]
  eq horse_happy_if_fed_within_dest jumpi    // [function_selector]

  dup1 __FUNC_SIG(isHappyHorse)              // [__FUNC_SIG(isHappyHorse), function_selector, function_selector]
  eq is_happy_horse_dest jumpi               // [function_selector]

  dup1 __FUNC_SIG(getApproved)               // [__FUNC_SIG(getApproved), function_selector, function_selector]
  eq get_approved_dest jumpi                 // [function_selector]

  dup1 __FUNC_SIG(isApprovedForAll)          // [__FUNC_SIG(isApprovedForAll), function_selector, function_selector]
  eq is_approved_for_all_dest jumpi          // [function_selector]

  0x00 0x00 revert                           // [0x00, 0x00] -> []

  // Function destinations
  mint_horse_dest:
    pop MINT_HORSE()
  feed_horse_dest:
    pop FEED_HORSE()
  approve_dest:
    pop ERC721_APPROVE()
  set_approval_for_all_dest:
    pop ERC721_SET_APPROVAL_FOR_ALL()
  horse_id_to_fed_timestamp_dest:
    pop HORSE_ID_TO_FED_TIMESTAMP()
  symbol_dest:
    pop ERC721_SYMBOL()
  name_dest:
    pop ERC721_NAME()
  total_supply_dest:
    pop ERC721_TOTAL_SUPPLY()
  owner_of_dest:
    pop ERC721_OWNER_OF()
  balance_of_dest:
    pop ERC721_BALANCE_OF()
  horse_happy_if_fed_within_dest:
    pop READ_HORSE_HAPPY_IF_FED_WITHIN()
  is_happy_horse_dest:
    pop IS_HAPPY_HORSE()
  get_approved_dest:
    pop ERC721_GET_APPROVED()
  is_approved_for_all_dest:
    pop ERC721_IS_APPROVED_FOR_ALL()
  transfer_from_dest:
    pop ERC721_TRANSFER_FROM()
}

/**********************************************************************
* Constructor                                                         *
***********************************************************************/
#define macro CONSTRUCTOR() = takes(0) returns(0) {
  ERC721_CONSTRUCTOR()
}

/**********************************************************************
* Functions                                                           *
***********************************************************************/
/// @notice Is Happy Horse
#define macro IS_HAPPY_HORSE() = takes(0) returns (0) {
  [HORSE_FED_TIMESTAMPS_STORAGE_SLOT]      // [HORSE_FED_TIMESTAMPS_STORAGE_SLOT]
  0x04 calldataload                        // [token_id, HORSE_FED_TIMESTAMPS_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)        // [timestamp_slot]
  sload                                    // [fed_timestamp]
  timestamp                                // [timestamp, fed_timestamp]
  dup2 dup2                                // [timestamp, fed_timestamp, timestamp, fed_timestamp]
  sub                                      // [timestamp - fed_timestamp, timestamp, fed_timestamp]
  [HORSE_HAPPY_IF_FED_WITHIN_SECONDS]      // [HORSE_HAPPY_IF_FED_WITHIN_SECONDS, timestamp - fed_timestamp, timestamp, fed_timestamp]
  gt                                       // [timestamp - fed_timestamp > HORSE_HAPPY_IF_FED_WITHIN_SECONDS, timestamp, fed_timestamp]
  start_return_true jumpi                  // [timestamp, fed_timestamp]
  eq                                       // [timestamp == fed_timestamp]
  start_return jump                        // []

  start_return_true:
  0x01

  start_return:
  0x00 mstore
  0x20 0x00 return
}

/// @notice Horse Happy If Fed Within
#define macro READ_HORSE_HAPPY_IF_FED_WITHIN() = takes(0) returns (0) {
  [HORSE_HAPPY_IF_FED_WITHIN_SECONDS]      // [HORSE_HAPPY_IF_FED_WITHIN_SECONDS]
  0x00 mstore                              // []
  0x20 0x00 return                         // []
}

/// @notice Horse Id To Fed Timestamp
#define macro HORSE_ID_TO_FED_TIMESTAMP() = takes(0) returns (0) {
  [HORSE_FED_TIMESTAMPS_STORAGE_SLOT]     // [HORSE_FED_TIMESTAMPS_STORAGE_SLOT]
  0x04 calldataload                       // [token_id, HORSE_FED_TIMESTAMPS_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [timestamp_slot]
  sload                                   // [timestamp]
  0x00 mstore                             // []
  0x20 0x00 return
}

/// @notice Feed Horse
#define macro FEED_HORSE() = takes(0) returns (0) {
  _NON_PAYABLE()

  [OWNERS_MAPPING_STORAGE_SLOT]            // [OWNERS_MAPPING_STORAGE_SLOT, token_id]
  0x04 calldataload                        // [token_id, OWNERS_MAPPING_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)        // [token_owner_slot]
  sload                                    // [owner]
  caller                                   // [caller, owner]
  eq iszero                                // [caller != owner]
  forbidden_jump_dest jumpi                // []

  timestamp                                // [timestamp]
  [HORSE_FED_TIMESTAMPS_STORAGE_SLOT]      // [HORSE_FED_TIMESTAMPS_STORAGE_SLOT, timestamp]
  0x04 calldataload                        // [token_id, HORSE_FED_TIMESTAMPS_STORAGE_SLOT, timestamp]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)        // [timestamp_slot, timstamp]
  sstore                                   // []
  0x00 0x00 return

  forbidden_jump_dest:
    __ERROR(HorseStoreForbiddenError)      // [error_selector]
    0x00 mstore                            // []
    0x04 0x00 revert
}

/// @notice Mint Horse
#define macro MINT_HORSE() = takes(0) returns (0) {
  _NON_PAYABLE()

  [ALL_TOKENS_STORAGE_SLOT]               // [ALL_TOKENS_STORAGE_SLOT]
  sload dup1                              // [token_id, token_id]
  caller                                  // [caller, token_id, token_id]
  swap1                                   // [token_id, caller, token_id]

  [OWNERS_MAPPING_STORAGE_SLOT] swap1     // [token_id, OWNERS_MAPPING_STORAGE_SLOT, caller, token_id]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [token_owner_slot, caller, token_id]
  sstore                                  // [token_id]

  [BALANCES_MAPPING_STORAGE_SLOT]          // [BALANCES_MAPPING_STORAGE_SLOT, token_id]
  caller                                   // [msg.sender, BALANCES_MAPPING_STORAGE_SLOT, token_id]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)        // [balance_slot, token_id]
  dup1                                     // [balance_slot, balance_slot, token_id]
  sload                                    // [prev_balance, balance_slot, token_id]
  0x01 add                                 // [prev_balance + 1, balance_slot, token_id]
  swap1                                    // [balance_slot, balances[msg.sender] + 1, token_id]
  sstore                                   // [token_id]

  [ALL_TOKENS_STORAGE_SLOT]                // [ALL_TOKENS_STORAGE_SLOT, token_id]
  0x00 mstore                              // [token_id]
  dup1                                     // [token_id, token_id]
  0x20 0x00 sha3                           // [keccak256(tokens_slot), token_id, token_id]
  0x01 add                                 // [token_id_slot + token_id, token_id]
  dup2                                     // [token_id, token_id_slot + token_id, token_id]
  swap1                                    // [token_id_slot + token_id, token_id, token_id]
  sstore                                   // [token_id]
  dup1                                     // [token_id, token_id]
  0x01 add                                 // [next_token_id, token_id]
  [ALL_TOKENS_STORAGE_SLOT]                // [ALL_TOKENS_STORAGE_SLOT, next_token_id, token_id]
  sstore                                   // [token_id]

  caller 0x00                              // [from (0x00), to (msg.sender), token_id]
  __EVENT_HASH(Transfer)                   // [event_hash, from (0x00), to (msg.sender), token_id]
  0x00 0x00 log4
  0x00 0x00 return
}


/**********************************************************************
* ERC721                                                              *
***********************************************************************/

/// @notice Name
/// @notice Returns the token name string
#define macro ERC721_NAME() = takes (0) returns (0) {
  _GET_IMMUTABLE(NAME_OFFSET, 0x00)           // [name_value]
  _GET_IMMUTABLE(NAME_LENGTH_OFFSET, 0x00)    // [name_length, name_value]
  0x20 0x00 mstore                            // [name_length, name_value]
  0x20 mstore                                 // [name_value]
  0x40 mstore                                 // []
  0x60 0x00 return                            // []
}

/// @notice Symbol
/// @notice Returns the token symbol string
#define macro ERC721_SYMBOL() = takes (0) returns (0) {
  _GET_IMMUTABLE(SYMBOL_OFFSET, 0x00)         // [symbol_value]
  _GET_IMMUTABLE(SYMBOL_LENGTH_OFFSET, 0x00)  // [symbol_length, symbol_value]
  0x20 0x00 mstore                            // [symbol_length, symbol_value]
  0x20 mstore                                 // [symbol_value]
  0x40 mstore                                 // []
  0x60 0x00 return                            // []
}

/// @notice Balance Of
/// @notice Returns the number of tokens owned by the given address
#define macro ERC721_BALANCE_OF() = takes (0) returns (0) {
  [BALANCES_MAPPING_STORAGE_SLOT]            // [BALANCES_MAPPING_STORAGE_SLOT]
  0x04 calldataload                          // [address, BALANCES_MAPPING_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)          // [balance_slot]
  sload                                      // [balance]
  0x00 mstore                                // []
  0x20 0x00 return                           // []
}

/// @notice Total Supply
/// @notice Returns the total number of tokens in existence
#define macro ERC721_TOTAL_SUPPLY() = takes (0) returns (0) {
  [ALL_TOKENS_STORAGE_SLOT]                  // [ALL_TOKENS_STORAGE_SLOT]
  sload                                      // [total_supply]
  0x00 mstore                                // []
  0x20 0x00 return                           // []
}

/// @notice Owner Of
/// @notice Returns the owner of the token
#define macro ERC721_OWNER_OF() = takes (0) returns(0) {
  0x04 calldataload                     // [token_id]
  _ERC721_OWNER_OF()                    // [owner]
  0x00 mstore                           // []
  0x20 0x00 return
}

/// @notice Approve
#define macro ERC721_APPROVE() = takes (0) returns(0) {
  _NON_PAYABLE()
  0x04 calldataload                       // [spender, spender]

  0x24 calldataload                       // [token_id, spender]
  dup1                                    // [token_id, token_id, spender]
  _ONLY_OWNER()                           // [token_id, spender]
  dup2 dup2                               // [token_id, spender, token_id, spender]
  [TOKEN_APPROVALS_STORAGE_SLOT]          // [TOKEN_APPROVALS_STORAGE_SLOT, token_id, spender, token_id, spender]
  swap1                                   // [token_id, TOKEN_APPROVALS_STORAGE_SLOT, spender, token_id spender]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [approval_slot, spender, token_id, spender]
  sstore                                  // [token_id, spender]
  swap1                                   // [spender, token_id]

  caller                                  // [msg.sender, spender, token_id]
  __EVENT_HASH(Approval)                  // [event_hash, msg.sender, spender, token_id]
  0x00 0x00 log4
  0x00 0x00 return
}

#define macro ERC721_GET_APPROVED() = takes(0) returns(0) {
  0x04 calldataload                       // [token_id, TOKEN_APPROVALS_STORAGE_SLOT]
  _ERC721_GET_APPROVED()
  0x00 mstore                             // []
  0x20 0x00 return                        // []
}

#define macro ERC721_SET_APPROVAL_FOR_ALL() = takes(0) returns(0) {
  _NON_PAYABLE()
  0x04 calldataload                       // [approved]
  0x24 calldataload                       // [operator, approved]
  swap1                                   // [approved, operator]

  _VALIDATE_OPERATOR()                    // [operator, approved]

  caller                                 // [msg.sender, operator, approved]
  dup3 dup3 dup3                         // [msg.sender, operator, approved, msg.sender, operator, approved] 
  [OPERATOR_APPROVALS_STORAGE_SLOT]      // [OPERATOR_APPROVALS_STORAGE_SLOT, msg.sender, operator, approved, msg.sender, operator, approved]
  _HASHMAP_2D_GET_SLOT_FROM_KEYS(0x00)   // [approval_slot, approved, msg.sender, operator, approved]
  sstore                                 // [msg.sender, operator, approved]

  // Emit event
  swap2                                  // [approved, operator, msg.sender]
  0x00 mstore                            // [operator, msg.sender]
  swap1                                  // [msg.sender, operator]
  __EVENT_HASH(ApprovalForAll)           // [event_hash, msg.sender, operator]
  0x20 0x00 log3                         // []
  0x00 0x00 return
}

#define macro ERC721_IS_APPROVED_FOR_ALL() = takes(0) returns(0) {
  0x24 calldataload                       // [operator]
  0x04 calldataload                       // [owner, operator]
  _ERC721_IS_APPROVED_FOR_ALL()           // [approved]
  0x00 mstore
  0x20 0x00 return
}

// calldata: [from, to, token_id]
#define macro ERC721_TRANSFER_FROM() = takes(0) returns(0) {
  0x24 calldataload                      // [to]
  _NON_ZERO_RECEIVER(0x00)               // [to]

  0x44 calldataload                      // [token_id]
  _ERC721_OWNER_OF()                     // [owner]

  dup1                                    // [owner, owner]
  caller                                  // [msg.sender, owner, owner]
  eq                                      // [msg.sender == owner, owner]
  trasfer_dest jumpi                      // [owner]

  caller                                  // [msg.sender, owner]
  swap1                                   // [owner, msg.sender]
  _ERC721_IS_APPROVED_FOR_ALL()           // [approved]
  trasfer_dest jumpi                      // [owner]

  0x44 calldataload                       // [token_id]
  _ERC721_GET_APPROVED()                  // [approved_spender]
  caller                                  // [msg.sender, approved_spender]
  eq                                      // [msg.sender == approved_spender]
  trasfer_dest jumpi                      // []

  __ERROR(ERC721InsufficientApproval)     // [error_selector]
  0x00 mstore                             // []
  caller 0x04 mstore                      // []
  0x44 calldataload 0x24 mstore           // []
  0x24 0x00 revert

  trasfer_dest:
    0x04 calldataload                       // [from]
    0x24 calldataload                       // [to, from]
    0x44 calldataload                       // [token_id, to, from]
    dup2                                    // [to, token_id, to, from]
    swap1                                   // [token_id, to, to, from]

    [OWNERS_MAPPING_STORAGE_SLOT]           // [OWNERS_MAPPING_STORAGE_SLOT, token_id, to, to, from]
    swap1                                   // [token_id, OWNERS_MAPPING_STORAGE_SLOT, to, to, from]
    _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [token_owner_slot, to, to, from, ]
    sstore                                  // [to, from]

    [BALANCES_MAPPING_STORAGE_SLOT]         // [BALANCES_MAPPING_STORAGE_SLOT, to, from]
    swap1                                   // [to, BALANCES_MAPPING_STORAGE_SLOT, from]
    _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [balance_slot, from]
    dup1                                    // [balance_slot, balance_slot, from]
    sload                                   // [prev_balance, balance_slot, from]
    0x01 add                                // [prev_balance + 1, balance_slot, from]
    swap1                                   // [balance_slot, prev_balance + 1, from]
    sstore                                  // [from]

    [BALANCES_MAPPING_STORAGE_SLOT]         // [BALANCES_MAPPING_STORAGE_SLOT, from]
    swap1                                   // [from, BALANCES_MAPPING_STORAGE_SLOT]
    _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [balance_slot]
    dup1                                    // [balance_slot, balance_slot]
    sload                                   // [prev_from_balance, balance_slot]
    0x01 swap1 sub                          // [prev_from_balance - 1, balance_slot]
    swap1                                   // [balance_slot, prev_from_balance - 1]
    sstore                                  // []

    0x44 calldataload                       // [token_id]
    0x24 calldataload                       // [to, token_id]
    0x04 calldataload                       // [from, to, token_id]
    __EVENT_HASH(Transfer)                  // [event_hash, from, to, token_id]
    0x00 0x00 log4

    0x00 0x00 return
}

#define macro ERC721_CONSTRUCTOR() = takes(0) returns(0) {
  // Constructor arguments:
  // ?, name_size, name, ?, symbol_size, symbol
  // Example: 
    // bytes.concat(abi.encode("Token"), abi.encode("TKN"))
    // abi.encode("Token") = 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005546f6b656e000000000000000000000000000000000000000000000000000000
  0xb                                     // [offset]
  dup1                                    // [offset, offset]
  codesize                                // [total_size, offset, offset]
  sub                                     // [runtime_size, offset]
  dup1                                    // [runtime_size, runtime_size, offset]
  swap2                                   // [offset, runtime_size, runtime_size]
  returndatasize                          // [return_offset, offset, runtime_size, runtime_size]
  codecopy                                // [runtime_size]

  // Return the runtime bytecode.
  returndatasize                          // [return_offset, runtime_size]
  return                                  // []
}

/**********************************************************************
* Internal                                                            *
***********************************************************************/

#define macro _ERC721_GET_APPROVED() = takes(1) returns(0) {
  // input stack: [token_id]
  [TOKEN_APPROVALS_STORAGE_SLOT]                  // [TOKEN_APPROVALS_STORAGE_SLOT, token_id]
  swap1                                           // [token_id, TOKEN_APPROVALS_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)       // [slot]
  sload                                           // [approved_spender]
}


/// @notice Owner Of
/// @notice Returns the owner of the token
#define macro _ERC721_OWNER_OF() = takes (1) returns(1) {
  // input stack: [token_id]
  [OWNERS_MAPPING_STORAGE_SLOT]         // [OWNERS_MAPPING_STORAGE_SLOT, token_id]
  swap1                                 // [token_id, OWNERS_MAPPING_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)     // [token_owner_slot]
  sload                                 // [owner]
}

#define macro _ERC721_IS_APPROVED_FOR_ALL() = takes(2) returns(1) {
  // input stack: [owner, operator]
  [OPERATOR_APPROVALS_STORAGE_SLOT]               // [OPERATOR_APPROVALS_STORAGE_SLOT, owner, operator]
  _HASHMAP_2D_GET_SLOT_FROM_KEYS(0x00)            // [approval_slot]
  sload                                           // [approved]
}


#define macro _NON_ZERO_RECEIVER(memory_ptr) = takes(1) returns(1) {
  // input stack: [receiver]
  dup1 0x00 eq                                // [receiver == 0x00, receiver]
  iszero                                      // [receiver != 0x00, receiver]
  continue_jump_dest jumpi                    // [receiver]
  __ERROR(ERC721InvalidReceiver)              // [error_selector, receiver]
  <memory_ptr> mstore                         // [receiver]
  <memory_ptr> 0x04 add mstore                // []
  0x24 <memory_ptr> revert                    // []
  continue_jump_dest:                         // [receiver]
}

#define macro _VALIDATE_OPERATOR() = takes(1) returns(1) {
  // input stack: [operator]
  dup1
  0x00 eq                                    // [operator == 0x00, operator]
  iszero                                     // [operator != 0x00, operator]
  continue_jump_dest jumpi                   // [operator]

  __ERROR(ERC721InvalidOperator)              // [error_selector, operator]
  0x00 mstore                                 // [operator]
  0x04 mstore                                 // []
  0x24 0x00 revert                            // []

  continue_jump_dest:                         // [operator]
}

#define macro _ONLY_OWNER() = takes(1) returns(0) {
  // input stack: [token_id]
  [OWNERS_MAPPING_STORAGE_SLOT]              // [OWNERS_MAPPING_STORAGE_SLOT, token_id]
  swap1                                      // [token_id, OWNERS_MAPPING_STORAGE_SLOT]
  _HASHMAP_GET_SLOT_FROM_KEYS(0x00)          // [owner_slot]
  sload                                      // [owner]  

  caller                                     // [caller, owner]
  eq                                         // [caller == owner]
  continue_jump_dest jumpi                   // []

  __ERROR(ForbiddenError)                    // [error_selector]
  0x00 mstore                                // []
  0x04 0x00 revert

  continue_jump_dest:
}

/**********************************************************************
* Utils                                                               *
***********************************************************************/

#define macro _NON_PAYABLE() = takes (0) returns (0) {
  0x00                            // [0x00]
  callvalue                       // [msg.value, 0x00]
  eq                              // [msg.value == 0x00]
  continue_jump_dest jumpi
  0x00 0x00 revert
  continue_jump_dest:         // []
}

#define macro _HASHMAP_GET_SLOT_FROM_KEYS(memory_ptr) = takes(2) returns (1) {
  // input stack: [key, slot]
  <memory_ptr>           // [memory_ptr, key, slot]
  mstore                 // [slot]
  <memory_ptr> 0x20 add  // [memory_ptr + 0x20, slot]
  mstore
  0x40 <memory_ptr> sha3 // [keccak256(key | slot)]
}

#define macro _HASHMAP_2D_GET_SLOT_FROM_KEYS(memory_ptr) = takes(3) returns (1) {
  // example: p[x][y]
  // input stack:  [p, x, y]
  <memory_ptr> 0x20 add // [memory_ptr + 0x20, p, x, y]
  mstore                // [x, y]
  <memory_ptr>
  mstore                 // [y]
  0x40 <memory_ptr> sha3 // [keccak256(p | x), y]

  swap1                  // [y, keccak256(p | x)]
  <memory_ptr>
  mstore                 // [keccak256(p | x)]
  <memory_ptr> 0x20 add  // [memory_ptr + 0x20, keccak256(p | x)]
  mstore                 // [keccak256(p | x)]
  0x40 <memory_ptr> sha3 // [keccak256(keccak256(p | x), y)]
}

#define macro _HASHMAP_ARRAY_GET_SLOT_FROM_KEYS(memory_ptr) = takes(2) returns (1) {
  // input stack: [slot, index]
  <memory_ptr>           // [memory_ptr, slot, index]
  mstore                 // [index]
  0x20 <memory_ptr> sha3 // [keccak256(slot), index)]
  add                    // [keccak256(slot) + index]
}

/// @notice Retrives an "immutable" from the runtime bytecode. Borrowed from the huffmate library
#define macro _GET_IMMUTABLE(offset_end, free_memory) = takes (0) returns (1) {
  // each immutable is stored as a 32-byte word
  0x20                        // [size]
  <offset_end> codesize sub   // [offset_code, size]
  <free_memory>               // [offset_memory, offset_code, size]
  codecopy                    // []
  <free_memory> mload         // [value]
}
